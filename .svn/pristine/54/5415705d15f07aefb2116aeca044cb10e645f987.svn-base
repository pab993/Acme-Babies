
package services;

import javax.transaction.Transactional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import utilities.AbstractTest;
import domain.Apply;
import domain.Offer;

@Transactional
@ContextConfiguration(locations = {
	"classpath:spring/junit.xml"
})
@RunWith(SpringJUnit4ClassRunner.class)
public class ApplyServiceTest extends AbstractTest {

	// The SUT
	// ====================================================

	@Autowired
	private ApplyService	applyService;

	@Autowired
	private OfferService	offerService;


	// Tests
	// ====================================================

	/*
	 * Accept or Reject their applies.
	 * 
	 * En este caso de uso se comprobamos que un usuario logueado como "Caretaker"
	 * puede aceptar o rechazar las applies que posea.
	 */

	public void saveStatusOfAppliesTest(final String username, final int caretakerId, final Class<?> expected) {
		Class<?> caught = null;

		try {
			this.authenticate(username);

			final Apply apply = this.applyService.findOne(21);

			apply.setStatus("ACCEPTED");

			this.applyService.saveStatus(apply);

			this.unauthenticate();

		} catch (final Throwable oops) {

			caught = oops.getClass();

		}

		this.checkExceptions(expected, caught);
	}

	/*
	 * Create an apply.
	 * 
	 * En este caso de uso se comprobamos que un usuario logueado como "Customer"
	 * puede aplicar sobre una oferta.
	 */

	public void createAndSaveApplyTest(final String username, final Class<?> expected) {
		Class<?> caught = null;

		try {

			this.authenticate(username);

			final Offer offer = this.offerService.findOne(17);

			final Apply apply = this.applyService.create(offer);

			this.applyService.save(apply);

			this.unauthenticate();

		} catch (final Throwable oops) {

			caught = oops.getClass();

		}

		this.checkExceptions(expected, caught);
	}

	/*
	 * Edit an apply.
	 * 
	 * En este caso de uso se comprobamos que un usuario logueado como "Customer"
	 * puede editar una apply pendiente.
	 */

	public void saveApplyEditTest(final String username, final int applyId, final Class<?> expected) {
		Class<?> caught = null;

		try {

			this.authenticate(username);

			final Apply apply = this.applyService.findOne(applyId);

			apply.setCounterOffer(222.0);
			apply.setDays(2);

			this.applyService.saveEdit(apply);

			this.unauthenticate();

		} catch (final Throwable oops) {

			caught = oops.getClass();

		}

		this.checkExceptions(expected, caught);
	}

	/*
	 * Delete an apply.
	 * 
	 * En este caso de uso se comprobamos que un usuario logueado como "Customer"
	 * puede borrar una apply pendiente.
	 */

	public void deleteApplyTest(final String username, final int applyId, final String status, final Class<?> expected) {
		Class<?> caught = null;

		try {

			this.authenticate("caretaker1");

			final Apply apply = this.applyService.findOne(applyId);

			apply.setStatus(status);

			final Apply saved = this.applyService.saveStatus(apply);

			this.unauthenticate();

			this.authenticate(username);

			this.applyService.delete(saved);

			this.unauthenticate();

		} catch (final Throwable oops) {

			caught = oops.getClass();

		}

		this.checkExceptions(expected, caught);
	}

	// Drivers
	// ===================================================

	@Test
	public void driverSaveStatusOfAppliesTest() {

		final Object testingData[][] = {
			// Alguien sin registrar/logueado -> false
			{
				null, 11, IllegalArgumentException.class
			},
			// Un customer -> false
			{
				"customer1", 9, ClassCastException.class
			},
			// Un cuidador -> true
			{
				"caretaker1", 11, null
			},
			// Una guarderia -> false
			{
				"kindergarten1", 13, ClassCastException.class
			}

		};
		for (int i = 0; i < testingData.length; i++)
			this.saveStatusOfAppliesTest((String) testingData[i][0], (int) testingData[i][1], (Class<?>) testingData[i][2]);
	}

	@Test
	public void driverCreateAndSaveApplyTest() {

		final Object testingData[][] = {
			// Alguien sin registrar/logueado -> false
			{
				null, IllegalArgumentException.class
			},
			// Un cliente -> true
			{
				"customer1", null
			},
			// Una guarderia -> false
			{
				"kindergarten1", IllegalArgumentException.class
			},
			// Un admin -> false
			{
				"admin", IllegalArgumentException.class
			}

		};
		for (int i = 0; i < testingData.length; i++)
			this.createAndSaveApplyTest((String) testingData[i][0], (Class<?>) testingData[i][1]);
	}

	@Test
	public void driverSaveApplyEditTest() {

		final Object testingData[][] = {
			// Alguien sin registrar/logueado -> false
			{
				null, 21, IllegalArgumentException.class
			},
			// Un customer -> true
			{
				"customer1", 21, null
			},
			// Una guarderia -> false
			{
				"kindergarten1", 21, IllegalArgumentException.class
			},
			// Un admin -> false
			{
				"admin", 21, IllegalArgumentException.class
			}

		};
		for (int i = 0; i < testingData.length; i++)
			this.saveApplyEditTest((String) testingData[i][0], (int) testingData[i][1], (Class<?>) testingData[i][2]);
	}

	@Test
	public void driverDeleteApplyTest() {

		final Object testingData[][] = {
			// Alguien sin registrar/logueado -> false
			{
				null, 21, "PENDING", IllegalArgumentException.class
			},
			// Un customer a una apply aceptada -> false
			{
				"customer1", 21, "ACCEPTED", IllegalArgumentException.class
			},
			// Un admin -> false
			{
				"admin", 21, "PENDING", IllegalArgumentException.class
			},
			// Un customer -> true
			{
				"customer1", 21, "PENDING", null
			},

		};
		for (int i = 0; i < testingData.length; i++)
			this.deleteApplyTest((String) testingData[i][0], (int) testingData[i][1], (String) testingData[i][2], (Class<?>) testingData[i][3]);
	}
}
